db

users
- have many questions
- have many comments
- have many answers
- have many votes

questions
- belong to a user
- have many answers
- have many comments as: :commentable
- have many votes

answers
- belong to a user
- belong to a question
- have many comments
- have many votes

comments
- belong to commentable (question, answer)
- belong to a user
- t.string body

votes
- belong to votable (question, answer, comments?)
- belong to a user

SESSIONS
#define login route
  session is created upon login with valid credentials
  user redirected to login with invalid credentials
    #define error helper(s)
    user sees error message with invalid credentials
#define logout route
  session is destroyed upon logout
  user is redirected to root upon logout

VOTES
create upvote button
votes#upvote route
  clicking upvote creates a vote record with the current user's id, question id, and answer id
implement downvoting (two-way voting with neutral state)
  votes#downvote checks whether a vote for the current user exists
    if it does and it's an upvote, delete the vote record
    if it does and it's a downvote, do nothing
    if it doesn't, create a downvote
  votes#upvote checks whether a vote exists
    if it does and it's an upvote, do nothing
    if it does and it's a downvote, delete the current record
    if it doesn't, create an upvote
make possible to set vote back to neutral (neither up nor down)

MARKDOWN WIDGET
Build a preview area.
on every keyup, update the preview area with what's in the new question text_field
  listen for key up events - on every key up..
  grab the text from the new question field
  then render it in the preview area
add logic so that the preview area can translate markdown syntax


